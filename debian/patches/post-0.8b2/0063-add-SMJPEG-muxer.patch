From ffa0923eee7707acf07a0847b6bac89b86e227dc Mon Sep 17 00:00:00 2001
From: Paul B Mahol <onemda@gmail.com>
Date: Sat, 14 Jan 2012 19:29:59 +0000
Subject: [PATCH 63/67] add SMJPEG muxer

Signed-off-by: Kostya Shishkov <kostya.shishkov@gmail.com>
---
 Changelog                |    1 +
 doc/general.texi         |    2 +-
 libavformat/Makefile     |    1 +
 libavformat/allformats.c |    2 +-
 libavformat/smjpegenc.c  |  149 ++++++++++++++++++++++++++++++++++++++++++++++
 libavformat/version.h    |    2 +-
 6 files changed, 154 insertions(+), 3 deletions(-)
 create mode 100644 libavformat/smjpegenc.c

diff --git a/Changelog b/Changelog
index cbe61f5..3515ba5 100644
--- a/Changelog
+++ b/Changelog
@@ -5,6 +5,7 @@ releases are sorted from youngest to oldest.
 version <next>:
 
 - GSM audio parser
+- SMJPEG muxer
 
 
 version 0.8_beta2:
diff --git a/doc/general.texi b/doc/general.texi
index 65d65bb..79af887 100644
--- a/doc/general.texi
+++ b/doc/general.texi
@@ -296,7 +296,7 @@ library:
     @tab Used in Sierra CD-ROM games.
 @item Smacker                   @tab   @tab X
     @tab Multimedia format used by many games.
-@item SMJPEG                    @tab   @tab X
+@item SMJPEG                    @tab X @tab X
     @tab Used in certain Loki game ports.
 @item Sony OpenMG (OMA)         @tab X @tab X
     @tab Audio format used in Sony Sonic Stage and Sony Vegas.
diff --git a/libavformat/Makefile b/libavformat/Makefile
index 3e0808a..e564243 100644
--- a/libavformat/Makefile
+++ b/libavformat/Makefile
@@ -275,6 +275,7 @@ OBJS-$(CONFIG_SHORTEN_DEMUXER)           += rawdec.o
 OBJS-$(CONFIG_SIFF_DEMUXER)              += siff.o
 OBJS-$(CONFIG_SMACKER_DEMUXER)           += smacker.o
 OBJS-$(CONFIG_SMJPEG_DEMUXER)            += smjpegdec.o smjpeg.o
+OBJS-$(CONFIG_SMJPEG_MUXER)              += smjpegenc.o smjpeg.o
 OBJS-$(CONFIG_SOL_DEMUXER)               += sol.o pcm.o
 OBJS-$(CONFIG_SOX_DEMUXER)               += soxdec.o pcm.o
 OBJS-$(CONFIG_SOX_MUXER)                 += soxenc.o
diff --git a/libavformat/allformats.c b/libavformat/allformats.c
index 523b113..481d2c1 100644
--- a/libavformat/allformats.c
+++ b/libavformat/allformats.c
@@ -201,7 +201,7 @@ void av_register_all(void)
     REGISTER_DEMUXER  (SHORTEN, shorten);
     REGISTER_DEMUXER  (SIFF, siff);
     REGISTER_DEMUXER  (SMACKER, smacker);
-    REGISTER_DEMUXER  (SMJPEG, smjpeg);
+    REGISTER_MUXDEMUX (SMJPEG, smjpeg);
     REGISTER_DEMUXER  (SOL, sol);
     REGISTER_MUXDEMUX (SOX, sox);
     REGISTER_MUXDEMUX (SPDIF, spdif);
diff --git a/libavformat/smjpegenc.c b/libavformat/smjpegenc.c
new file mode 100644
index 0000000..45ba20b
--- /dev/null
+++ b/libavformat/smjpegenc.c
@@ -0,0 +1,149 @@
+/*
+ * SMJPEG muxer
+ * Copyright (c) 2012 Paul B Mahol
+ *
+ * This file is part of Libav.
+ *
+ * Libav is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * Libav is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with Libav; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+/**
+ * @file
+ * This is a muxer for Loki SDL Motion JPEG files
+ */
+
+#include "avformat.h"
+#include "internal.h"
+#include "riff.h"
+#include "smjpeg.h"
+
+typedef struct SMJPEGMuxContext {
+    uint32_t duration;
+} SMJPEGMuxContext;
+
+static int smjpeg_write_header(AVFormatContext *s)
+{
+    AVDictionaryEntry *t = NULL;
+    AVIOContext *pb = s->pb;
+    int n, tag;
+
+    if (s->nb_streams > 2) {
+        av_log(s, AV_LOG_ERROR, "more than >2 streams are not supported\n");
+        return AVERROR(EINVAL);
+    }
+    avio_write(pb, SMJPEG_MAGIC, 8);
+    avio_wb32(pb, 0);
+    avio_wb32(pb, 0);
+
+    while ((t = av_dict_get(s->metadata, "", t, AV_DICT_IGNORE_SUFFIX))) {
+        avio_wl32(pb, SMJPEG_TXT);
+        avio_wb32(pb, strlen(t->key) + strlen(t->value) + 3);
+        avio_write(pb, t->key, strlen(t->key));
+        avio_write(pb, " = ", 3);
+        avio_write(pb, t->value, strlen(t->value));
+    }
+
+    for (n = 0; n < s->nb_streams; n++) {
+        AVStream *st = s->streams[n];
+        AVCodecContext *codec = st->codec;
+        if (codec->codec_type == AVMEDIA_TYPE_AUDIO) {
+            tag = ff_codec_get_tag(ff_codec_smjpeg_audio_tags, codec->codec_id);
+            if (!tag) {
+                av_log(s, AV_LOG_ERROR, "unsupported audio codec\n");
+                return AVERROR(EINVAL);
+            }
+            avio_wl32(pb, SMJPEG_SND);
+            avio_wb32(pb, 8);
+            avio_wb16(pb, codec->sample_rate);
+            avio_w8(pb, av_get_bits_per_sample(codec->codec_id));
+            avio_w8(pb, codec->channels);
+            avio_wl32(pb, tag);
+            avpriv_set_pts_info(st, 32, 1, 1000);
+        } else if (codec->codec_type == AVMEDIA_TYPE_VIDEO) {
+            tag = ff_codec_get_tag(ff_codec_smjpeg_video_tags, codec->codec_id);
+            if (!tag) {
+                av_log(s, AV_LOG_ERROR, "unsupported video codec\n");
+                return AVERROR(EINVAL);
+            }
+            avio_wl32(pb, SMJPEG_VID);
+            avio_wb32(pb, 12);
+            avio_wb32(pb, 0);
+            avio_wb16(pb, codec->width);
+            avio_wb16(pb, codec->height);
+            avio_wl32(pb, tag);
+            avpriv_set_pts_info(st, 32, 1, 1000);
+        }
+    }
+
+    avio_wl32(pb, SMJPEG_HEND);
+    avio_flush(pb);
+
+    return 0;
+}
+
+static int smjpeg_write_packet(AVFormatContext *s, AVPacket *pkt)
+{
+    SMJPEGMuxContext *smc = s->priv_data;
+    AVIOContext *pb = s->pb;
+    AVStream *st = s->streams[pkt->stream_index];
+    AVCodecContext *codec = st->codec;
+
+    if (codec->codec_type == AVMEDIA_TYPE_AUDIO)
+        avio_wl32(pb, SMJPEG_SNDD);
+    else if (codec->codec_type == AVMEDIA_TYPE_VIDEO)
+        avio_wl32(pb, SMJPEG_VIDD);
+    else
+        return 0;
+
+    avio_wb32(pb, pkt->pts);
+    avio_wb32(pb, pkt->size);
+    avio_write(pb, pkt->data, pkt->size);
+    avio_flush(pb);
+
+    smc->duration = FFMAX(smc->duration, pkt->pts + pkt->duration);
+    return 0;
+}
+
+static int smjpeg_write_trailer(AVFormatContext *s)
+{
+    SMJPEGMuxContext *smc = s->priv_data;
+    AVIOContext *pb = s->pb;
+    int64_t currentpos;
+
+    if (pb->seekable) {
+        currentpos = avio_tell(pb);
+        avio_seek(pb, 12, SEEK_SET);
+        avio_wb32(pb, smc->duration);
+        avio_seek(pb, currentpos, SEEK_SET);
+    }
+
+    avio_wl32(pb, SMJPEG_DONE);
+    avio_flush(pb);
+
+    return 0;
+}
+
+AVOutputFormat ff_smjpeg_muxer = {
+    .name           = "smjpeg",
+    .long_name      = NULL_IF_CONFIG_SMALL("Loki SDL MJPEG"),
+    .priv_data_size = sizeof(SMJPEGMuxContext),
+    .audio_codec    = CODEC_ID_PCM_S16LE,
+    .video_codec    = CODEC_ID_MJPEG,
+    .write_header   = smjpeg_write_header,
+    .write_packet   = smjpeg_write_packet,
+    .write_trailer  = smjpeg_write_trailer,
+    .flags          = AVFMT_GLOBALHEADER,
+    .codec_tag      = (const AVCodecTag *const []){ ff_codec_smjpeg_video_tags, ff_codec_smjpeg_audio_tags, 0 },
+};
diff --git a/libavformat/version.h b/libavformat/version.h
index fb5a1eb..cd774fb 100644
--- a/libavformat/version.h
+++ b/libavformat/version.h
@@ -30,7 +30,7 @@
 #include "libavutil/avutil.h"
 
 #define LIBAVFORMAT_VERSION_MAJOR 53
-#define LIBAVFORMAT_VERSION_MINOR 19
+#define LIBAVFORMAT_VERSION_MINOR 20
 #define LIBAVFORMAT_VERSION_MICRO  0
 
 #define LIBAVFORMAT_VERSION_INT AV_VERSION_INT(LIBAVFORMAT_VERSION_MAJOR, \
-- 
1.7.5.4

